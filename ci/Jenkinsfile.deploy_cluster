env.SSH="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@${params.HOST}"

pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '100'))
    }

    parameters {
        string(name:"GIT_REPO", defaultValue: "git://github.com/yrobla/openshift-upi-virtualmedia-deploy.git", description: "Repo to clone containing the Dockerfile for the image", trim: true)
        string(name:"GIT_BRANCH", defaultValue: "master", description: "Branch for the git repo", trim: true)
        string(name:"INVENTORY_PATH", defaultValue: "/opt/openshift-upi-virtualmedia-deploy/inventory/hosts", description: "Path for the ansible inventory", trim: true)
	booleanParam(name:"PREPARE_NODE", defaultValue: true, description: "Execute node preparation step")
	booleanParam(name:"PREPARE_AND_CONFIGURE_INSTALLER", defaultValue: true, description: "Execute installer preparation and configuration step")
	booleanParam(name:"INSTALL_CLUSTER", defaultValue: true, description: "Install openshift cluster")
    }

    agent { label 'worker' }

    environment {
            BASE_REPO_DIR = sh(returnStdout: true, script: "echo $WORKSPACE/openshift-upi-virtualmedia-deploy").trim()

    }

    stages {
        stage('Prepare Workspace') {
            steps {
                // cleanup workspace
                step([$class: 'WsCleanup'])

                script {
                    // Set the build description to trigger user
                    currentBuild.getBuildCauses().reverse().eachWithIndex { foo, index ->
                        if(currentBuild.getBuildCauses().reverse()[index].userName != null) {
                            currentBuild.description = "Triggered by: " + currentBuild.getBuildCauses().reverse()[index].userName
                            return true
                        }
                    }
                }

                sh '''
		# clone the repo
                git -c http.sslVerify=false clone --single-branch --branch $GIT_BRANCH $GIT_REPO $BASE_REPO_DIR

		# copy inventory to workspace

                '''

            }
        }

        stage('Prepare node') {            
            when {
                anyOf {
                    environment name: 'PREPARE_NODE', value: 'true'
                }
            }
            steps {
                sh '''
		pushd $BASE_REPO_DIR
		ansible-playbook -v -i ${INVENTORY_PATH} playbook.yml --tags=node_preparation
		popd
                '''
            }
        }

        stage('Prepare and configure installer') {            
            when {
                anyOf {
                    environment name: 'PREPARE_AND_CONFIGURE_INSTALLER', value: 'true'
                }
            }
            steps {
                sh '''
		pushd $BASE_REPO_DIR
		ansible-playbook -v -i ${INVENTORY_PATH} playbook.yml --tags=installer_preparation,installer_configuration
		popd
                '''
            }
        }

        stage('Install cluster') {            
            when {
                anyOf {
                    environment name: 'INSTALL_CLUSTER', value: 'true'
                }
            }
            steps {
                sh '''
		pushd $BASE_REPO_DIR
		ansible-playbook -v -i ${INVENTORY_PATH} playbook.yml --tags=installer
		popd
                '''
            }
        }


    }
}  // pipeline
